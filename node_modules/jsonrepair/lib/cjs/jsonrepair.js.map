{"version":3,"file":"jsonrepair.js","names":["_JSONRepairError","require","_stringUtils","controlCharacters","escapeCharacters","b","f","n","r","t","jsonrepair","text","i","output","processed","parseValue","throwUnexpectedEnd","processedComma","parseCharacter","codeComma","parseWhitespaceAndSkipComments","isStartOfValue","endsWithCommaOrNewline","insertBeforeLastWhitespace","parseNewlineDelimitedJSON","stripLastOccurrence","length","throwUnexpectedCharacter","parseObject","parseArray","parseString","parseNumber","parseKeywords","parseUnquotedString","start","changed","parseWhitespace","parseComment","whitespace","normal","isWhitespace","charCodeAt","isSpecialWhitespace","codeSlash","codeAsterisk","atEndOfBlockComment","codeNewline","code","skipCharacter","skipEscapeCharacter","codeBackslash","codeOpeningBrace","initial","codeClosingBrace","processedKey","codeClosingBracket","codeOpeningBracket","undefined","throwObjectKeyExpected","processedColon","codeColon","throwColonExpected","processedValue","concat","stopAtDelimiter","arguments","skipEscapeChars","isQuote","isEndQuote","isDoubleQuote","isSingleQuote","isSingleQuoteLike","isDoubleQuoteLike","iBefore","outputBefore","isEndOfString","isDelimiter","char","charAt","escapeChar","slice","isHex","throwInvalidUnicodeCharacter","codeDoubleQuote","isControlCharacter","isValidStringCharacter","throwInvalidCharacter","hasEndQuote","valid","nextNonWhiteSpaceCharacter","parseConcatenatedString","codePlus","removeAtIndex","codeMinus","expectDigitOrRepair","isDigit","codeDot","codeLowercaseE","codeUppercaseE","num","hasInvalidLeadingZero","test","parseKeyword","name","value","codeOpenParenthesis","codeCloseParenthesis","codeSemicolon","symbol","JSON","stringify","expectDigit","numSoFar","JSONRepairError","got","end","chars"],"sources":["../../src/jsonrepair.ts"],"sourcesContent":["import { JSONRepairError } from './JSONRepairError.js'\nimport {\n  codeAsterisk,\n  codeBackslash,\n  codeCloseParenthesis,\n  codeClosingBrace,\n  codeClosingBracket,\n  codeColon,\n  codeComma,\n  codeDot,\n  codeDoubleQuote,\n  codeLowercaseE,\n  codeMinus,\n  codeNewline,\n  codeOpeningBrace,\n  codeOpeningBracket,\n  codeOpenParenthesis,\n  codePlus,\n  codeSemicolon,\n  codeSlash,\n  codeUppercaseE,\n  endsWithCommaOrNewline,\n  insertBeforeLastWhitespace,\n  isControlCharacter,\n  isDelimiter,\n  isDigit,\n  isDoubleQuote,\n  isDoubleQuoteLike,\n  isHex,\n  isQuote,\n  isSingleQuote,\n  isSingleQuoteLike,\n  isSpecialWhitespace,\n  isStartOfValue,\n  isValidStringCharacter,\n  isWhitespace,\n  nextNonWhiteSpaceCharacter,\n  removeAtIndex,\n  stripLastOccurrence\n} from './stringUtils.js'\n\nconst controlCharacters: { [key: string]: string } = {\n  '\\b': '\\\\b',\n  '\\f': '\\\\f',\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\t': '\\\\t'\n}\n\n// map with all escape characters\nconst escapeCharacters: { [key: string]: string } = {\n  '\"': '\"',\n  '\\\\': '\\\\',\n  '/': '/',\n  b: '\\b',\n  f: '\\f',\n  n: '\\n',\n  r: '\\r',\n  t: '\\t'\n  // note that \\u is handled separately in parseString()\n}\n\n/**\n * Repair a string containing an invalid JSON document.\n * For example changes JavaScript notation into JSON notation.\n *\n * Example:\n *\n *     try {\n *       const json = \"{name: 'John'}\"\n *       const repaired = jsonrepair(json)\n *       console.log(repaired)\n *       // '{\"name\": \"John\"}'\n *     } catch (err) {\n *       console.error(err)\n *     }\n *\n */\nexport function jsonrepair(text: string): string {\n  let i = 0 // current index in text\n  let output = '' // generated output\n\n  const processed = parseValue()\n  if (!processed) {\n    throwUnexpectedEnd()\n  }\n\n  const processedComma = parseCharacter(codeComma)\n  if (processedComma) {\n    parseWhitespaceAndSkipComments()\n  }\n\n  if (isStartOfValue(text[i]) && endsWithCommaOrNewline(output)) {\n    // start of a new value after end of the root level object: looks like\n    // newline delimited JSON -> turn into a root level array\n    if (!processedComma) {\n      // repair missing comma\n      output = insertBeforeLastWhitespace(output, ',')\n    }\n\n    parseNewlineDelimitedJSON()\n  } else if (processedComma) {\n    // repair: remove trailing comma\n    output = stripLastOccurrence(output, ',')\n  }\n\n  if (i >= text.length) {\n    // reached the end of the document properly\n    return output\n  }\n\n  throwUnexpectedCharacter()\n\n  function parseValue(): boolean {\n    parseWhitespaceAndSkipComments()\n    const processed =\n      parseObject() ||\n      parseArray() ||\n      parseString() ||\n      parseNumber() ||\n      parseKeywords() ||\n      parseUnquotedString()\n    parseWhitespaceAndSkipComments()\n\n    return processed\n  }\n\n  function parseWhitespaceAndSkipComments(): boolean {\n    const start = i\n\n    let changed = parseWhitespace()\n    do {\n      changed = parseComment()\n      if (changed) {\n        changed = parseWhitespace()\n      }\n    } while (changed)\n\n    return i > start\n  }\n\n  function parseWhitespace(): boolean {\n    let whitespace = ''\n    let normal: boolean\n    while ((normal = isWhitespace(text.charCodeAt(i))) || isSpecialWhitespace(text.charCodeAt(i))) {\n      if (normal) {\n        whitespace += text[i]\n      } else {\n        // repair special whitespace\n        whitespace += ' '\n      }\n\n      i++\n    }\n\n    if (whitespace.length > 0) {\n      output += whitespace\n      return true\n    }\n\n    return false\n  }\n\n  function parseComment(): boolean {\n    // find a block comment '/* ... */'\n    if (text.charCodeAt(i) === codeSlash && text.charCodeAt(i + 1) === codeAsterisk) {\n      // repair block comment by skipping it\n      while (i < text.length && !atEndOfBlockComment(text, i)) {\n        i++\n      }\n      i += 2\n\n      return true\n    }\n\n    // find a line comment '// ...'\n    if (text.charCodeAt(i) === codeSlash && text.charCodeAt(i + 1) === codeSlash) {\n      // repair line comment by skipping it\n      while (i < text.length && text.charCodeAt(i) !== codeNewline) {\n        i++\n      }\n\n      return true\n    }\n\n    return false\n  }\n\n  function parseCharacter(code: number): boolean {\n    if (text.charCodeAt(i) === code) {\n      output += text[i]\n      i++\n      return true\n    }\n\n    return false\n  }\n\n  function skipCharacter(code: number): boolean {\n    if (text.charCodeAt(i) === code) {\n      i++\n      return true\n    }\n\n    return false\n  }\n\n  function skipEscapeCharacter(): boolean {\n    return skipCharacter(codeBackslash)\n  }\n\n  /**\n   * Parse an object like '{\"key\": \"value\"}'\n   */\n  function parseObject(): boolean {\n    if (text.charCodeAt(i) === codeOpeningBrace) {\n      output += '{'\n      i++\n      parseWhitespaceAndSkipComments()\n\n      let initial = true\n      while (i < text.length && text.charCodeAt(i) !== codeClosingBrace) {\n        let processedComma\n        if (!initial) {\n          processedComma = parseCharacter(codeComma)\n          if (!processedComma) {\n            // repair missing comma\n            output = insertBeforeLastWhitespace(output, ',')\n          }\n          parseWhitespaceAndSkipComments()\n        } else {\n          processedComma = true\n          initial = false\n        }\n\n        const processedKey = parseString() || parseUnquotedString()\n        if (!processedKey) {\n          if (\n            text.charCodeAt(i) === codeClosingBrace ||\n            text.charCodeAt(i) === codeOpeningBrace ||\n            text.charCodeAt(i) === codeClosingBracket ||\n            text.charCodeAt(i) === codeOpeningBracket ||\n            text[i] === undefined\n          ) {\n            // repair trailing comma\n            output = stripLastOccurrence(output, ',')\n          } else {\n            throwObjectKeyExpected()\n          }\n          break\n        }\n\n        parseWhitespaceAndSkipComments()\n        const processedColon = parseCharacter(codeColon)\n        if (!processedColon) {\n          if (isStartOfValue(text[i])) {\n            // repair missing colon\n            output = insertBeforeLastWhitespace(output, ':')\n          } else {\n            throwColonExpected()\n          }\n        }\n        const processedValue = parseValue()\n        if (!processedValue) {\n          if (processedColon) {\n            // repair missing object value\n            output += 'null'\n          } else {\n            throwColonExpected()\n          }\n        }\n      }\n\n      if (text.charCodeAt(i) === codeClosingBrace) {\n        output += '}'\n        i++\n      } else {\n        // repair missing end bracket\n        output = insertBeforeLastWhitespace(output, '}')\n      }\n\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Parse an array like '[\"item1\", \"item2\", ...]'\n   */\n  function parseArray(): boolean {\n    if (text.charCodeAt(i) === codeOpeningBracket) {\n      output += '['\n      i++\n      parseWhitespaceAndSkipComments()\n\n      let initial = true\n      while (i < text.length && text.charCodeAt(i) !== codeClosingBracket) {\n        if (!initial) {\n          const processedComma = parseCharacter(codeComma)\n          if (!processedComma) {\n            // repair missing comma\n            output = insertBeforeLastWhitespace(output, ',')\n          }\n        } else {\n          initial = false\n        }\n\n        const processedValue = parseValue()\n        if (!processedValue) {\n          // repair trailing comma\n          output = stripLastOccurrence(output, ',')\n          break\n        }\n      }\n\n      if (text.charCodeAt(i) === codeClosingBracket) {\n        output += ']'\n        i++\n      } else {\n        // repair missing closing array bracket\n        output = insertBeforeLastWhitespace(output, ']')\n      }\n\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Parse and repair Newline Delimited JSON (NDJSON):\n   * multiple JSON objects separated by a newline character\n   */\n  function parseNewlineDelimitedJSON() {\n    // repair NDJSON\n    let initial = true\n    let processedValue = true\n    while (processedValue) {\n      if (!initial) {\n        // parse optional comma, insert when missing\n        const processedComma = parseCharacter(codeComma)\n        if (!processedComma) {\n          // repair: add missing comma\n          output = insertBeforeLastWhitespace(output, ',')\n        }\n      } else {\n        initial = false\n      }\n\n      processedValue = parseValue()\n    }\n\n    if (!processedValue) {\n      // repair: remove trailing comma\n      output = stripLastOccurrence(output, ',')\n    }\n\n    // repair: wrap the output inside array brackets\n    output = `[\\n${output}\\n]`\n  }\n\n  /**\n   * Parse a string enclosed by double quotes \"...\". Can contain escaped quotes\n   * Repair strings enclosed in single quotes or special quotes\n   * Repair an escaped string\n   *\n   * The function can run in two stages:\n   * - First, it assumes the string has a valid end quote\n   * - If it turns out that the string does not have a valid end quote followed\n   *   by a delimiter (which should be the case), the function runs again in a\n   *   more conservative way, stopping the string at the first next delimiter\n   *   and fixing the string by inserting a quote there.\n   */\n  function parseString(stopAtDelimiter = false): boolean {\n    let skipEscapeChars = text.charCodeAt(i) === codeBackslash\n    if (skipEscapeChars) {\n      // repair: remove the first escape character\n      i++\n      skipEscapeChars = true\n    }\n\n    if (isQuote(text.charCodeAt(i))) {\n      // double quotes are correct JSON,\n      // single quotes come from JavaScript for example, we assume it will have a correct single end quote too\n      // otherwise, we will match any double-quote-like start with a double-quote-like end,\n      // or any single-quote-like start with a single-quote-like end\n      const isEndQuote = isDoubleQuote(text.charCodeAt(i))\n        ? isDoubleQuote\n        : isSingleQuote(text.charCodeAt(i))\n        ? isSingleQuote // eslint-disable-line indent\n        : isSingleQuoteLike(text.charCodeAt(i)) // eslint-disable-line indent\n        ? isSingleQuoteLike // eslint-disable-line indent\n        : isDoubleQuoteLike // eslint-disable-line indent\n\n      const iBefore = i\n      const outputBefore = output // we may need to revert\n\n      output += '\"'\n      i++\n\n      const isEndOfString = stopAtDelimiter\n        ? (i: number) => isDelimiter(text[i])\n        : (i: number) => isEndQuote(text.charCodeAt(i))\n\n      while (i < text.length && !isEndOfString(i)) {\n        if (text.charCodeAt(i) === codeBackslash) {\n          const char = text.charAt(i + 1)\n          const escapeChar = escapeCharacters[char]\n          if (escapeChar !== undefined) {\n            output += text.slice(i, i + 2)\n            i += 2\n          } else if (char === 'u') {\n            if (\n              isHex(text.charCodeAt(i + 2)) &&\n              isHex(text.charCodeAt(i + 3)) &&\n              isHex(text.charCodeAt(i + 4)) &&\n              isHex(text.charCodeAt(i + 5))\n            ) {\n              output += text.slice(i, i + 6)\n              i += 6\n            } else {\n              throwInvalidUnicodeCharacter(i)\n            }\n          } else {\n            // repair invalid escape character: remove it\n            output += char\n            i += 2\n          }\n        } else {\n          const char = text.charAt(i)\n          const code = text.charCodeAt(i)\n\n          if (code === codeDoubleQuote && text.charCodeAt(i - 1) !== codeBackslash) {\n            // repair unescaped double quote\n            output += '\\\\' + char\n            i++\n          } else if (isControlCharacter(code)) {\n            // unescaped control character\n            output += controlCharacters[char]\n            i++\n          } else {\n            if (!isValidStringCharacter(code)) {\n              throwInvalidCharacter(char)\n            }\n            output += char\n            i++\n          }\n        }\n\n        if (skipEscapeChars) {\n          const processed = skipEscapeCharacter()\n          if (processed) {\n            // repair: skipped escape character (nothing to do)\n          }\n        }\n      }\n\n      // see whether we have an end quote followed by a valid delimiter\n      const hasEndQuote = isQuote(text.charCodeAt(i))\n      const valid =\n        hasEndQuote &&\n        (i + 1 >= text.length || isDelimiter(nextNonWhiteSpaceCharacter(text, i + 1)))\n      if (!valid && !stopAtDelimiter) {\n        // we're dealing with a missing quote somewhere. Let's revert parsing\n        // this string and try again, running in a more conservative mode,\n        // stopping at the first next delimiter\n        i = iBefore\n        output = outputBefore\n        return parseString(true)\n      }\n\n      if (hasEndQuote) {\n        output += '\"'\n        i++\n      } else {\n        // repair missing quote\n        output = insertBeforeLastWhitespace(output, '\"')\n      }\n\n      parseConcatenatedString()\n\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Repair concatenated strings like \"hello\" + \"world\", change this into \"helloworld\"\n   */\n  function parseConcatenatedString(): boolean {\n    let processed = false\n\n    parseWhitespaceAndSkipComments()\n    while (text.charCodeAt(i) === codePlus) {\n      processed = true\n      i++\n      parseWhitespaceAndSkipComments()\n\n      // repair: remove the end quote of the first string\n      output = stripLastOccurrence(output, '\"', true)\n      const start = output.length\n      parseString()\n\n      // repair: remove the start quote of the second string\n      output = removeAtIndex(output, start, 1)\n    }\n\n    return processed\n  }\n\n  /**\n   * Parse a number like 2.4 or 2.4e6\n   */\n  function parseNumber(): boolean {\n    const start = i\n    if (text.charCodeAt(i) === codeMinus) {\n      i++\n      if (expectDigitOrRepair(start)) {\n        return true\n      }\n    }\n\n    // Note that in JSON leading zeros like \"00789\" are not allowed.\n    // We will allow all leading zeros here though and at the end of parseNumber\n    // check against trailing zeros and repair that if needed.\n    // Leading zeros can have meaning, so we should not clear them.\n    while (isDigit(text.charCodeAt(i))) {\n      i++\n    }\n\n    if (text.charCodeAt(i) === codeDot) {\n      i++\n      if (expectDigitOrRepair(start)) {\n        return true\n      }\n      while (isDigit(text.charCodeAt(i))) {\n        i++\n      }\n    }\n\n    if (text.charCodeAt(i) === codeLowercaseE || text.charCodeAt(i) === codeUppercaseE) {\n      i++\n      if (text.charCodeAt(i) === codeMinus || text.charCodeAt(i) === codePlus) {\n        i++\n      }\n      if (expectDigitOrRepair(start)) {\n        return true\n      }\n      while (isDigit(text.charCodeAt(i))) {\n        i++\n      }\n    }\n\n    if (i > start) {\n      // repair a number with leading zeros like \"00789\"\n      const num = text.slice(start, i)\n      const hasInvalidLeadingZero = /^0\\d/.test(num)\n\n      output += hasInvalidLeadingZero ? `\"${num}\"` : num\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Parse keywords true, false, null\n   * Repair Python keywords True, False, None\n   */\n  function parseKeywords(): boolean {\n    return (\n      parseKeyword('true', 'true') ||\n      parseKeyword('false', 'false') ||\n      parseKeyword('null', 'null') ||\n      // repair Python keywords True, False, None\n      parseKeyword('True', 'true') ||\n      parseKeyword('False', 'false') ||\n      parseKeyword('None', 'null')\n    )\n  }\n\n  function parseKeyword(name: string, value: string): boolean {\n    if (text.slice(i, i + name.length) === name) {\n      output += value\n      i += name.length\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Repair and unquoted string by adding quotes around it\n   * Repair a MongoDB function call like NumberLong(\"2\")\n   * Repair a JSONP function call like callback({...});\n   */\n  function parseUnquotedString() {\n    // note that the symbol can end with whitespaces: we stop at the next delimiter\n    const start = i\n    while (i < text.length && !isDelimiter(text[i])) {\n      i++\n    }\n\n    if (i > start) {\n      if (text.charCodeAt(i) === codeOpenParenthesis) {\n        // repair a MongoDB function call like NumberLong(\"2\")\n        // repair a JSONP function call like callback({...});\n        i++\n\n        parseValue()\n\n        if (text.charCodeAt(i) === codeCloseParenthesis) {\n          // repair: skip close bracket of function call\n          i++\n          if (text.charCodeAt(i) === codeSemicolon) {\n            // repair: skip semicolon after JSONP call\n            i++\n          }\n        }\n\n        return true\n      } else {\n        // repair unquoted string\n        // also, repair undefined into null\n\n        // first, go back to prevent getting trailing whitespaces in the string\n        while (isWhitespace(text.charCodeAt(i - 1)) && i > 0) {\n          i--\n        }\n\n        const symbol = text.slice(start, i)\n        output += symbol === 'undefined' ? 'null' : JSON.stringify(symbol)\n\n        if (text.charCodeAt(i) === codeDoubleQuote) {\n          // we had a missing start quote, but now we encountered the end quote, so we can skip that one\n          i++\n        }\n\n        return true\n      }\n    }\n  }\n\n  function expectDigit(start: number) {\n    if (!isDigit(text.charCodeAt(i))) {\n      const numSoFar = text.slice(start, i)\n      throw new JSONRepairError(`Invalid number '${numSoFar}', expecting a digit ${got()}`, i)\n    }\n  }\n\n  function expectDigitOrRepair(start: number) {\n    if (i >= text.length) {\n      // repair numbers cut off at the end\n      // this will only be called when we end after a '.', '-', or 'e' and does not\n      // change the number more than it needs to make it valid JSON\n      output += text.slice(start, i) + '0'\n      return true\n    } else {\n      expectDigit(start)\n      return false\n    }\n  }\n\n  function throwInvalidCharacter(char: string) {\n    throw new JSONRepairError('Invalid character ' + JSON.stringify(char), i)\n  }\n\n  function throwUnexpectedCharacter() {\n    throw new JSONRepairError('Unexpected character ' + JSON.stringify(text[i]), i)\n  }\n\n  function throwUnexpectedEnd() {\n    throw new JSONRepairError('Unexpected end of json string', text.length)\n  }\n\n  function throwObjectKeyExpected() {\n    throw new JSONRepairError('Object key expected', i)\n  }\n\n  function throwColonExpected() {\n    throw new JSONRepairError('Colon expected', i)\n  }\n\n  function throwInvalidUnicodeCharacter(start: number) {\n    let end = start + 2\n    while (/\\w/.test(text[end])) {\n      end++\n    }\n    const chars = text.slice(start, end)\n    throw new JSONRepairError(`Invalid unicode character \"${chars}\"`, i)\n  }\n\n  function got(): string {\n    return text[i] ? `but got '${text[i]}'` : 'but reached end of input'\n  }\n}\n\nfunction atEndOfBlockComment(text: string, i: number) {\n  return text[i] === '*' && text[i + 1] === '/'\n}\n"],"mappings":";;;;;;AAAA,IAAAA,gBAAA,GAAAC,OAAA;AACA,IAAAC,YAAA,GAAAD,OAAA;AAwCA,MAAME,iBAA4C,GAAG;EACnD,IAAI,EAAE,KAAK;EACX,IAAI,EAAE,KAAK;EACX,IAAI,EAAE,KAAK;EACX,IAAI,EAAE,KAAK;EACX,IAAI,EAAE;AACR,CAAC;;AAED;AACA,MAAMC,gBAA2C,GAAG;EAClD,GAAG,EAAE,GAAG;EACR,IAAI,EAAE,IAAI;EACV,GAAG,EAAE,GAAG;EACRC,CAAC,EAAE,IAAI;EACPC,CAAC,EAAE,IAAI;EACPC,CAAC,EAAE,IAAI;EACPC,CAAC,EAAE,IAAI;EACPC,CAAC,EAAE;EACH;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,UAAUA,CAACC,IAAY,EAAU;EAC/C,IAAIC,CAAC,GAAG,CAAC,EAAC;EACV,IAAIC,MAAM,GAAG,EAAE,EAAC;;EAEhB,MAAMC,SAAS,GAAGC,UAAU,CAAC,CAAC;EAC9B,IAAI,CAACD,SAAS,EAAE;IACdE,kBAAkB,CAAC,CAAC;EACtB;EAEA,MAAMC,cAAc,GAAGC,cAAc,CAACC,sBAAS,CAAC;EAChD,IAAIF,cAAc,EAAE;IAClBG,8BAA8B,CAAC,CAAC;EAClC;EAEA,IAAI,IAAAC,2BAAc,EAACV,IAAI,CAACC,CAAC,CAAC,CAAC,IAAI,IAAAU,mCAAsB,EAACT,MAAM,CAAC,EAAE;IAC7D;IACA;IACA,IAAI,CAACI,cAAc,EAAE;MACnB;MACAJ,MAAM,GAAG,IAAAU,uCAA0B,EAACV,MAAM,EAAE,GAAG,CAAC;IAClD;IAEAW,yBAAyB,CAAC,CAAC;EAC7B,CAAC,MAAM,IAAIP,cAAc,EAAE;IACzB;IACAJ,MAAM,GAAG,IAAAY,gCAAmB,EAACZ,MAAM,EAAE,GAAG,CAAC;EAC3C;EAEA,IAAID,CAAC,IAAID,IAAI,CAACe,MAAM,EAAE;IACpB;IACA,OAAOb,MAAM;EACf;EAEAc,wBAAwB,CAAC,CAAC;EAE1B,SAASZ,UAAUA,CAAA,EAAY;IAC7BK,8BAA8B,CAAC,CAAC;IAChC,MAAMN,SAAS,GACbc,WAAW,CAAC,CAAC,IACbC,UAAU,CAAC,CAAC,IACZC,WAAW,CAAC,CAAC,IACbC,WAAW,CAAC,CAAC,IACbC,aAAa,CAAC,CAAC,IACfC,mBAAmB,CAAC,CAAC;IACvBb,8BAA8B,CAAC,CAAC;IAEhC,OAAON,SAAS;EAClB;EAEA,SAASM,8BAA8BA,CAAA,EAAY;IACjD,MAAMc,KAAK,GAAGtB,CAAC;IAEf,IAAIuB,OAAO,GAAGC,eAAe,CAAC,CAAC;IAC/B,GAAG;MACDD,OAAO,GAAGE,YAAY,CAAC,CAAC;MACxB,IAAIF,OAAO,EAAE;QACXA,OAAO,GAAGC,eAAe,CAAC,CAAC;MAC7B;IACF,CAAC,QAAQD,OAAO;IAEhB,OAAOvB,CAAC,GAAGsB,KAAK;EAClB;EAEA,SAASE,eAAeA,CAAA,EAAY;IAClC,IAAIE,UAAU,GAAG,EAAE;IACnB,IAAIC,MAAe;IACnB,OAAO,CAACA,MAAM,GAAG,IAAAC,yBAAY,EAAC7B,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,CAAC,KAAK,IAAA8B,gCAAmB,EAAC/B,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,CAAC,EAAE;MAC7F,IAAI2B,MAAM,EAAE;QACVD,UAAU,IAAI3B,IAAI,CAACC,CAAC,CAAC;MACvB,CAAC,MAAM;QACL;QACA0B,UAAU,IAAI,GAAG;MACnB;MAEA1B,CAAC,EAAE;IACL;IAEA,IAAI0B,UAAU,CAACZ,MAAM,GAAG,CAAC,EAAE;MACzBb,MAAM,IAAIyB,UAAU;MACpB,OAAO,IAAI;IACb;IAEA,OAAO,KAAK;EACd;EAEA,SAASD,YAAYA,CAAA,EAAY;IAC/B;IACA,IAAI1B,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,KAAK+B,sBAAS,IAAIhC,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,GAAG,CAAC,CAAC,KAAKgC,yBAAY,EAAE;MAC/E;MACA,OAAOhC,CAAC,GAAGD,IAAI,CAACe,MAAM,IAAI,CAACmB,mBAAmB,CAAClC,IAAI,EAAEC,CAAC,CAAC,EAAE;QACvDA,CAAC,EAAE;MACL;MACAA,CAAC,IAAI,CAAC;MAEN,OAAO,IAAI;IACb;;IAEA;IACA,IAAID,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,KAAK+B,sBAAS,IAAIhC,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,GAAG,CAAC,CAAC,KAAK+B,sBAAS,EAAE;MAC5E;MACA,OAAO/B,CAAC,GAAGD,IAAI,CAACe,MAAM,IAAIf,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,KAAKkC,wBAAW,EAAE;QAC5DlC,CAAC,EAAE;MACL;MAEA,OAAO,IAAI;IACb;IAEA,OAAO,KAAK;EACd;EAEA,SAASM,cAAcA,CAAC6B,IAAY,EAAW;IAC7C,IAAIpC,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,KAAKmC,IAAI,EAAE;MAC/BlC,MAAM,IAAIF,IAAI,CAACC,CAAC,CAAC;MACjBA,CAAC,EAAE;MACH,OAAO,IAAI;IACb;IAEA,OAAO,KAAK;EACd;EAEA,SAASoC,aAAaA,CAACD,IAAY,EAAW;IAC5C,IAAIpC,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,KAAKmC,IAAI,EAAE;MAC/BnC,CAAC,EAAE;MACH,OAAO,IAAI;IACb;IAEA,OAAO,KAAK;EACd;EAEA,SAASqC,mBAAmBA,CAAA,EAAY;IACtC,OAAOD,aAAa,CAACE,0BAAa,CAAC;EACrC;;EAEA;AACF;AACA;EACE,SAAStB,WAAWA,CAAA,EAAY;IAC9B,IAAIjB,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,KAAKuC,6BAAgB,EAAE;MAC3CtC,MAAM,IAAI,GAAG;MACbD,CAAC,EAAE;MACHQ,8BAA8B,CAAC,CAAC;MAEhC,IAAIgC,OAAO,GAAG,IAAI;MAClB,OAAOxC,CAAC,GAAGD,IAAI,CAACe,MAAM,IAAIf,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,KAAKyC,6BAAgB,EAAE;QACjE,IAAIpC,cAAc;QAClB,IAAI,CAACmC,OAAO,EAAE;UACZnC,cAAc,GAAGC,cAAc,CAACC,sBAAS,CAAC;UAC1C,IAAI,CAACF,cAAc,EAAE;YACnB;YACAJ,MAAM,GAAG,IAAAU,uCAA0B,EAACV,MAAM,EAAE,GAAG,CAAC;UAClD;UACAO,8BAA8B,CAAC,CAAC;QAClC,CAAC,MAAM;UACLH,cAAc,GAAG,IAAI;UACrBmC,OAAO,GAAG,KAAK;QACjB;QAEA,MAAME,YAAY,GAAGxB,WAAW,CAAC,CAAC,IAAIG,mBAAmB,CAAC,CAAC;QAC3D,IAAI,CAACqB,YAAY,EAAE;UACjB,IACE3C,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,KAAKyC,6BAAgB,IACvC1C,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,KAAKuC,6BAAgB,IACvCxC,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,KAAK2C,+BAAkB,IACzC5C,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,KAAK4C,+BAAkB,IACzC7C,IAAI,CAACC,CAAC,CAAC,KAAK6C,SAAS,EACrB;YACA;YACA5C,MAAM,GAAG,IAAAY,gCAAmB,EAACZ,MAAM,EAAE,GAAG,CAAC;UAC3C,CAAC,MAAM;YACL6C,sBAAsB,CAAC,CAAC;UAC1B;UACA;QACF;QAEAtC,8BAA8B,CAAC,CAAC;QAChC,MAAMuC,cAAc,GAAGzC,cAAc,CAAC0C,sBAAS,CAAC;QAChD,IAAI,CAACD,cAAc,EAAE;UACnB,IAAI,IAAAtC,2BAAc,EAACV,IAAI,CAACC,CAAC,CAAC,CAAC,EAAE;YAC3B;YACAC,MAAM,GAAG,IAAAU,uCAA0B,EAACV,MAAM,EAAE,GAAG,CAAC;UAClD,CAAC,MAAM;YACLgD,kBAAkB,CAAC,CAAC;UACtB;QACF;QACA,MAAMC,cAAc,GAAG/C,UAAU,CAAC,CAAC;QACnC,IAAI,CAAC+C,cAAc,EAAE;UACnB,IAAIH,cAAc,EAAE;YAClB;YACA9C,MAAM,IAAI,MAAM;UAClB,CAAC,MAAM;YACLgD,kBAAkB,CAAC,CAAC;UACtB;QACF;MACF;MAEA,IAAIlD,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,KAAKyC,6BAAgB,EAAE;QAC3CxC,MAAM,IAAI,GAAG;QACbD,CAAC,EAAE;MACL,CAAC,MAAM;QACL;QACAC,MAAM,GAAG,IAAAU,uCAA0B,EAACV,MAAM,EAAE,GAAG,CAAC;MAClD;MAEA,OAAO,IAAI;IACb;IAEA,OAAO,KAAK;EACd;;EAEA;AACF;AACA;EACE,SAASgB,UAAUA,CAAA,EAAY;IAC7B,IAAIlB,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,KAAK4C,+BAAkB,EAAE;MAC7C3C,MAAM,IAAI,GAAG;MACbD,CAAC,EAAE;MACHQ,8BAA8B,CAAC,CAAC;MAEhC,IAAIgC,OAAO,GAAG,IAAI;MAClB,OAAOxC,CAAC,GAAGD,IAAI,CAACe,MAAM,IAAIf,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,KAAK2C,+BAAkB,EAAE;QACnE,IAAI,CAACH,OAAO,EAAE;UACZ,MAAMnC,cAAc,GAAGC,cAAc,CAACC,sBAAS,CAAC;UAChD,IAAI,CAACF,cAAc,EAAE;YACnB;YACAJ,MAAM,GAAG,IAAAU,uCAA0B,EAACV,MAAM,EAAE,GAAG,CAAC;UAClD;QACF,CAAC,MAAM;UACLuC,OAAO,GAAG,KAAK;QACjB;QAEA,MAAMU,cAAc,GAAG/C,UAAU,CAAC,CAAC;QACnC,IAAI,CAAC+C,cAAc,EAAE;UACnB;UACAjD,MAAM,GAAG,IAAAY,gCAAmB,EAACZ,MAAM,EAAE,GAAG,CAAC;UACzC;QACF;MACF;MAEA,IAAIF,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,KAAK2C,+BAAkB,EAAE;QAC7C1C,MAAM,IAAI,GAAG;QACbD,CAAC,EAAE;MACL,CAAC,MAAM;QACL;QACAC,MAAM,GAAG,IAAAU,uCAA0B,EAACV,MAAM,EAAE,GAAG,CAAC;MAClD;MAEA,OAAO,IAAI;IACb;IAEA,OAAO,KAAK;EACd;;EAEA;AACF;AACA;AACA;EACE,SAASW,yBAAyBA,CAAA,EAAG;IACnC;IACA,IAAI4B,OAAO,GAAG,IAAI;IAClB,IAAIU,cAAc,GAAG,IAAI;IACzB,OAAOA,cAAc,EAAE;MACrB,IAAI,CAACV,OAAO,EAAE;QACZ;QACA,MAAMnC,cAAc,GAAGC,cAAc,CAACC,sBAAS,CAAC;QAChD,IAAI,CAACF,cAAc,EAAE;UACnB;UACAJ,MAAM,GAAG,IAAAU,uCAA0B,EAACV,MAAM,EAAE,GAAG,CAAC;QAClD;MACF,CAAC,MAAM;QACLuC,OAAO,GAAG,KAAK;MACjB;MAEAU,cAAc,GAAG/C,UAAU,CAAC,CAAC;IAC/B;IAEA,IAAI,CAAC+C,cAAc,EAAE;MACnB;MACAjD,MAAM,GAAG,IAAAY,gCAAmB,EAACZ,MAAM,EAAE,GAAG,CAAC;IAC3C;;IAEA;IACAA,MAAM,SAAAkD,MAAA,CAASlD,MAAM,QAAK;EAC5B;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASiB,WAAWA,CAAA,EAAmC;IAAA,IAAlCkC,eAAe,GAAAC,SAAA,CAAAvC,MAAA,QAAAuC,SAAA,QAAAR,SAAA,GAAAQ,SAAA,MAAG,KAAK;IAC1C,IAAIC,eAAe,GAAGvD,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,KAAKsC,0BAAa;IAC1D,IAAIgB,eAAe,EAAE;MACnB;MACAtD,CAAC,EAAE;MACHsD,eAAe,GAAG,IAAI;IACxB;IAEA,IAAI,IAAAC,oBAAO,EAACxD,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,CAAC,EAAE;MAC/B;MACA;MACA;MACA;MACA,MAAMwD,UAAU,GAAG,IAAAC,0BAAa,EAAC1D,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,CAAC,GAChDyD,0BAAa,GACb,IAAAC,0BAAa,EAAC3D,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,CAAC,GACjC0D,0BAAa,CAAC;MAAA,EACd,IAAAC,8BAAiB,EAAC5D,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,CAAC,CAAC;MAAA,EACtC2D,8BAAiB,CAAC;MAAA,EAClBC,8BAAiB,EAAC;;MAEtB,MAAMC,OAAO,GAAG7D,CAAC;MACjB,MAAM8D,YAAY,GAAG7D,MAAM,EAAC;;MAE5BA,MAAM,IAAI,GAAG;MACbD,CAAC,EAAE;MAEH,MAAM+D,aAAa,GAAGX,eAAe,GAChCpD,CAAS,IAAK,IAAAgE,wBAAW,EAACjE,IAAI,CAACC,CAAC,CAAC,CAAC,GAClCA,CAAS,IAAKwD,UAAU,CAACzD,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,CAAC;MAEjD,OAAOA,CAAC,GAAGD,IAAI,CAACe,MAAM,IAAI,CAACiD,aAAa,CAAC/D,CAAC,CAAC,EAAE;QAC3C,IAAID,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,KAAKsC,0BAAa,EAAE;UACxC,MAAM2B,IAAI,GAAGlE,IAAI,CAACmE,MAAM,CAAClE,CAAC,GAAG,CAAC,CAAC;UAC/B,MAAMmE,UAAU,GAAG3E,gBAAgB,CAACyE,IAAI,CAAC;UACzC,IAAIE,UAAU,KAAKtB,SAAS,EAAE;YAC5B5C,MAAM,IAAIF,IAAI,CAACqE,KAAK,CAACpE,CAAC,EAAEA,CAAC,GAAG,CAAC,CAAC;YAC9BA,CAAC,IAAI,CAAC;UACR,CAAC,MAAM,IAAIiE,IAAI,KAAK,GAAG,EAAE;YACvB,IACE,IAAAI,kBAAK,EAACtE,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,GAAG,CAAC,CAAC,CAAC,IAC7B,IAAAqE,kBAAK,EAACtE,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,GAAG,CAAC,CAAC,CAAC,IAC7B,IAAAqE,kBAAK,EAACtE,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,GAAG,CAAC,CAAC,CAAC,IAC7B,IAAAqE,kBAAK,EAACtE,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,GAAG,CAAC,CAAC,CAAC,EAC7B;cACAC,MAAM,IAAIF,IAAI,CAACqE,KAAK,CAACpE,CAAC,EAAEA,CAAC,GAAG,CAAC,CAAC;cAC9BA,CAAC,IAAI,CAAC;YACR,CAAC,MAAM;cACLsE,4BAA4B,CAACtE,CAAC,CAAC;YACjC;UACF,CAAC,MAAM;YACL;YACAC,MAAM,IAAIgE,IAAI;YACdjE,CAAC,IAAI,CAAC;UACR;QACF,CAAC,MAAM;UACL,MAAMiE,IAAI,GAAGlE,IAAI,CAACmE,MAAM,CAAClE,CAAC,CAAC;UAC3B,MAAMmC,IAAI,GAAGpC,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC;UAE/B,IAAImC,IAAI,KAAKoC,4BAAe,IAAIxE,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,GAAG,CAAC,CAAC,KAAKsC,0BAAa,EAAE;YACxE;YACArC,MAAM,IAAI,IAAI,GAAGgE,IAAI;YACrBjE,CAAC,EAAE;UACL,CAAC,MAAM,IAAI,IAAAwE,+BAAkB,EAACrC,IAAI,CAAC,EAAE;YACnC;YACAlC,MAAM,IAAIV,iBAAiB,CAAC0E,IAAI,CAAC;YACjCjE,CAAC,EAAE;UACL,CAAC,MAAM;YACL,IAAI,CAAC,IAAAyE,mCAAsB,EAACtC,IAAI,CAAC,EAAE;cACjCuC,qBAAqB,CAACT,IAAI,CAAC;YAC7B;YACAhE,MAAM,IAAIgE,IAAI;YACdjE,CAAC,EAAE;UACL;QACF;QAEA,IAAIsD,eAAe,EAAE;UACnB,MAAMpD,SAAS,GAAGmC,mBAAmB,CAAC,CAAC;UACvC,IAAInC,SAAS,EAAE;YACb;UAAA;QAEJ;MACF;;MAEA;MACA,MAAMyE,WAAW,GAAG,IAAApB,oBAAO,EAACxD,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,CAAC;MAC/C,MAAM4E,KAAK,GACTD,WAAW,KACV3E,CAAC,GAAG,CAAC,IAAID,IAAI,CAACe,MAAM,IAAI,IAAAkD,wBAAW,EAAC,IAAAa,uCAA0B,EAAC9E,IAAI,EAAEC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAChF,IAAI,CAAC4E,KAAK,IAAI,CAACxB,eAAe,EAAE;QAC9B;QACA;QACA;QACApD,CAAC,GAAG6D,OAAO;QACX5D,MAAM,GAAG6D,YAAY;QACrB,OAAO5C,WAAW,CAAC,IAAI,CAAC;MAC1B;MAEA,IAAIyD,WAAW,EAAE;QACf1E,MAAM,IAAI,GAAG;QACbD,CAAC,EAAE;MACL,CAAC,MAAM;QACL;QACAC,MAAM,GAAG,IAAAU,uCAA0B,EAACV,MAAM,EAAE,GAAG,CAAC;MAClD;MAEA6E,uBAAuB,CAAC,CAAC;MAEzB,OAAO,IAAI;IACb;IAEA,OAAO,KAAK;EACd;;EAEA;AACF;AACA;EACE,SAASA,uBAAuBA,CAAA,EAAY;IAC1C,IAAI5E,SAAS,GAAG,KAAK;IAErBM,8BAA8B,CAAC,CAAC;IAChC,OAAOT,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,KAAK+E,qBAAQ,EAAE;MACtC7E,SAAS,GAAG,IAAI;MAChBF,CAAC,EAAE;MACHQ,8BAA8B,CAAC,CAAC;;MAEhC;MACAP,MAAM,GAAG,IAAAY,gCAAmB,EAACZ,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC;MAC/C,MAAMqB,KAAK,GAAGrB,MAAM,CAACa,MAAM;MAC3BI,WAAW,CAAC,CAAC;;MAEb;MACAjB,MAAM,GAAG,IAAA+E,0BAAa,EAAC/E,MAAM,EAAEqB,KAAK,EAAE,CAAC,CAAC;IAC1C;IAEA,OAAOpB,SAAS;EAClB;;EAEA;AACF;AACA;EACE,SAASiB,WAAWA,CAAA,EAAY;IAC9B,MAAMG,KAAK,GAAGtB,CAAC;IACf,IAAID,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,KAAKiF,sBAAS,EAAE;MACpCjF,CAAC,EAAE;MACH,IAAIkF,mBAAmB,CAAC5D,KAAK,CAAC,EAAE;QAC9B,OAAO,IAAI;MACb;IACF;;IAEA;IACA;IACA;IACA;IACA,OAAO,IAAA6D,oBAAO,EAACpF,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,CAAC,EAAE;MAClCA,CAAC,EAAE;IACL;IAEA,IAAID,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,KAAKoF,oBAAO,EAAE;MAClCpF,CAAC,EAAE;MACH,IAAIkF,mBAAmB,CAAC5D,KAAK,CAAC,EAAE;QAC9B,OAAO,IAAI;MACb;MACA,OAAO,IAAA6D,oBAAO,EAACpF,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,CAAC,EAAE;QAClCA,CAAC,EAAE;MACL;IACF;IAEA,IAAID,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,KAAKqF,2BAAc,IAAItF,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,KAAKsF,2BAAc,EAAE;MAClFtF,CAAC,EAAE;MACH,IAAID,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,KAAKiF,sBAAS,IAAIlF,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,KAAK+E,qBAAQ,EAAE;QACvE/E,CAAC,EAAE;MACL;MACA,IAAIkF,mBAAmB,CAAC5D,KAAK,CAAC,EAAE;QAC9B,OAAO,IAAI;MACb;MACA,OAAO,IAAA6D,oBAAO,EAACpF,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,CAAC,EAAE;QAClCA,CAAC,EAAE;MACL;IACF;IAEA,IAAIA,CAAC,GAAGsB,KAAK,EAAE;MACb;MACA,MAAMiE,GAAG,GAAGxF,IAAI,CAACqE,KAAK,CAAC9C,KAAK,EAAEtB,CAAC,CAAC;MAChC,MAAMwF,qBAAqB,GAAG,MAAM,CAACC,IAAI,CAACF,GAAG,CAAC;MAE9CtF,MAAM,IAAIuF,qBAAqB,QAAArC,MAAA,CAAOoC,GAAG,UAAMA,GAAG;MAClD,OAAO,IAAI;IACb;IAEA,OAAO,KAAK;EACd;;EAEA;AACF;AACA;AACA;EACE,SAASnE,aAAaA,CAAA,EAAY;IAChC,OACEsE,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,IAC5BA,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC,IAC9BA,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC;IAC5B;IACAA,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,IAC5BA,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC,IAC9BA,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC;EAEhC;EAEA,SAASA,YAAYA,CAACC,IAAY,EAAEC,KAAa,EAAW;IAC1D,IAAI7F,IAAI,CAACqE,KAAK,CAACpE,CAAC,EAAEA,CAAC,GAAG2F,IAAI,CAAC7E,MAAM,CAAC,KAAK6E,IAAI,EAAE;MAC3C1F,MAAM,IAAI2F,KAAK;MACf5F,CAAC,IAAI2F,IAAI,CAAC7E,MAAM;MAChB,OAAO,IAAI;IACb;IAEA,OAAO,KAAK;EACd;;EAEA;AACF;AACA;AACA;AACA;EACE,SAASO,mBAAmBA,CAAA,EAAG;IAC7B;IACA,MAAMC,KAAK,GAAGtB,CAAC;IACf,OAAOA,CAAC,GAAGD,IAAI,CAACe,MAAM,IAAI,CAAC,IAAAkD,wBAAW,EAACjE,IAAI,CAACC,CAAC,CAAC,CAAC,EAAE;MAC/CA,CAAC,EAAE;IACL;IAEA,IAAIA,CAAC,GAAGsB,KAAK,EAAE;MACb,IAAIvB,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,KAAK6F,gCAAmB,EAAE;QAC9C;QACA;QACA7F,CAAC,EAAE;QAEHG,UAAU,CAAC,CAAC;QAEZ,IAAIJ,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,KAAK8F,iCAAoB,EAAE;UAC/C;UACA9F,CAAC,EAAE;UACH,IAAID,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,KAAK+F,0BAAa,EAAE;YACxC;YACA/F,CAAC,EAAE;UACL;QACF;QAEA,OAAO,IAAI;MACb,CAAC,MAAM;QACL;QACA;;QAEA;QACA,OAAO,IAAA4B,yBAAY,EAAC7B,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,GAAG,CAAC,CAAC,CAAC,IAAIA,CAAC,GAAG,CAAC,EAAE;UACpDA,CAAC,EAAE;QACL;QAEA,MAAMgG,MAAM,GAAGjG,IAAI,CAACqE,KAAK,CAAC9C,KAAK,EAAEtB,CAAC,CAAC;QACnCC,MAAM,IAAI+F,MAAM,KAAK,WAAW,GAAG,MAAM,GAAGC,IAAI,CAACC,SAAS,CAACF,MAAM,CAAC;QAElE,IAAIjG,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,KAAKuE,4BAAe,EAAE;UAC1C;UACAvE,CAAC,EAAE;QACL;QAEA,OAAO,IAAI;MACb;IACF;EACF;EAEA,SAASmG,WAAWA,CAAC7E,KAAa,EAAE;IAClC,IAAI,CAAC,IAAA6D,oBAAO,EAACpF,IAAI,CAAC8B,UAAU,CAAC7B,CAAC,CAAC,CAAC,EAAE;MAChC,MAAMoG,QAAQ,GAAGrG,IAAI,CAACqE,KAAK,CAAC9C,KAAK,EAAEtB,CAAC,CAAC;MACrC,MAAM,IAAIqG,gCAAe,oBAAAlD,MAAA,CAAoBiD,QAAQ,2BAAAjD,MAAA,CAAwBmD,GAAG,CAAC,CAAC,GAAItG,CAAC,CAAC;IAC1F;EACF;EAEA,SAASkF,mBAAmBA,CAAC5D,KAAa,EAAE;IAC1C,IAAItB,CAAC,IAAID,IAAI,CAACe,MAAM,EAAE;MACpB;MACA;MACA;MACAb,MAAM,IAAIF,IAAI,CAACqE,KAAK,CAAC9C,KAAK,EAAEtB,CAAC,CAAC,GAAG,GAAG;MACpC,OAAO,IAAI;IACb,CAAC,MAAM;MACLmG,WAAW,CAAC7E,KAAK,CAAC;MAClB,OAAO,KAAK;IACd;EACF;EAEA,SAASoD,qBAAqBA,CAACT,IAAY,EAAE;IAC3C,MAAM,IAAIoC,gCAAe,CAAC,oBAAoB,GAAGJ,IAAI,CAACC,SAAS,CAACjC,IAAI,CAAC,EAAEjE,CAAC,CAAC;EAC3E;EAEA,SAASe,wBAAwBA,CAAA,EAAG;IAClC,MAAM,IAAIsF,gCAAe,CAAC,uBAAuB,GAAGJ,IAAI,CAACC,SAAS,CAACnG,IAAI,CAACC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC;EACjF;EAEA,SAASI,kBAAkBA,CAAA,EAAG;IAC5B,MAAM,IAAIiG,gCAAe,CAAC,+BAA+B,EAAEtG,IAAI,CAACe,MAAM,CAAC;EACzE;EAEA,SAASgC,sBAAsBA,CAAA,EAAG;IAChC,MAAM,IAAIuD,gCAAe,CAAC,qBAAqB,EAAErG,CAAC,CAAC;EACrD;EAEA,SAASiD,kBAAkBA,CAAA,EAAG;IAC5B,MAAM,IAAIoD,gCAAe,CAAC,gBAAgB,EAAErG,CAAC,CAAC;EAChD;EAEA,SAASsE,4BAA4BA,CAAChD,KAAa,EAAE;IACnD,IAAIiF,GAAG,GAAGjF,KAAK,GAAG,CAAC;IACnB,OAAO,IAAI,CAACmE,IAAI,CAAC1F,IAAI,CAACwG,GAAG,CAAC,CAAC,EAAE;MAC3BA,GAAG,EAAE;IACP;IACA,MAAMC,KAAK,GAAGzG,IAAI,CAACqE,KAAK,CAAC9C,KAAK,EAAEiF,GAAG,CAAC;IACpC,MAAM,IAAIF,gCAAe,gCAAAlD,MAAA,CAA+BqD,KAAK,SAAKxG,CAAC,CAAC;EACtE;EAEA,SAASsG,GAAGA,CAAA,EAAW;IACrB,OAAOvG,IAAI,CAACC,CAAC,CAAC,eAAAmD,MAAA,CAAepD,IAAI,CAACC,CAAC,CAAC,SAAM,0BAA0B;EACtE;AACF;AAEA,SAASiC,mBAAmBA,CAAClC,IAAY,EAAEC,CAAS,EAAE;EACpD,OAAOD,IAAI,CAACC,CAAC,CAAC,KAAK,GAAG,IAAID,IAAI,CAACC,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG;AAC/C"}