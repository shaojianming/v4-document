{"remainingRequest":"/Users/shaojm/work/www/v4-document/node_modules/babel-loader/lib/index.js??ref--3-1!/Users/shaojm/work/www/v4-document/node_modules/vue-loader/lib/loaders/templateLoader.js??ref--6!/Users/shaojm/work/www/v4-document/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/shaojm/work/www/v4-document/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/shaojm/work/www/v4-document/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/shaojm/work/www/v4-document/docs/v4/developer/zh/services/checkout/api/uniformly.md?vue&type=template&id=dc3d9fcc","dependencies":[{"path":"/Users/shaojm/work/www/v4-document/docs/v4/developer/zh/services/checkout/api/uniformly.md","mtime":1698990875128},{"path":"/Users/shaojm/work/www/v4-document/node_modules/cache-loader/dist/cjs.js","mtime":1698990879045},{"path":"/Users/shaojm/work/www/v4-document/node_modules/cache-loader/dist/cjs.js","mtime":1698990879045},{"path":"/Users/shaojm/work/www/v4-document/node_modules/babel-loader/lib/index.js","mtime":1698990878835},{"path":"/Users/shaojm/work/www/v4-document/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1698990881504},{"path":"/Users/shaojm/work/www/v4-document/node_modules/cache-loader/dist/cjs.js","mtime":1698990879045},{"path":"/Users/shaojm/work/www/v4-document/node_modules/vue-loader/lib/index.js","mtime":1698990881504},{"path":"/Users/shaojm/work/www/v4-document/node_modules/@vuepress/markdown-loader/index.js","mtime":1698990878324}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}