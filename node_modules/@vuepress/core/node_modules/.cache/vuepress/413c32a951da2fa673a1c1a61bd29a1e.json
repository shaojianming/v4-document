{"remainingRequest":"/Users/shaojm/work/www/v4-document/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/shaojm/work/www/v4-document/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/shaojm/work/www/v4-document/docs/v4/developer/zh/services/checkout/sign.md?vue&type=script&lang=js","dependencies":[{"path":"/Users/shaojm/work/www/v4-document/docs/v4/developer/zh/services/checkout/sign.md","mtime":1698922442983},{"path":"/Users/shaojm/work/www/v4-document/node_modules/cache-loader/dist/cjs.js","mtime":1698386204375},{"path":"/Users/shaojm/work/www/v4-document/node_modules/babel-loader/lib/index.js","mtime":1698386204160},{"path":"/Users/shaojm/work/www/v4-document/node_modules/cache-loader/dist/cjs.js","mtime":1698386204375},{"path":"/Users/shaojm/work/www/v4-document/node_modules/vue-loader/lib/index.js","mtime":1698386206165},{"path":"/Users/shaojm/work/www/v4-document/node_modules/@vuepress/markdown-loader/index.js","mtime":1698386203298}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgICBpbXBvcnQgQ29kZUJsb2NrIGZyb20gIi4uLy4uLy4uLy4uLy4uLy52dWVwcmVzcy90aGVtZS9nbG9iYWwtY29tcG9uZW50cy9Db2RlQmxvY2siOwogICAgZXhwb3J0IGRlZmF1bHQgewogICAgICAgIGNvbXBvbmVudHM6IHtDb2RlQmxvY2t9CiAgICB9Cg=="},{"version":3,"sources":["sign.md"],"names":[],"mappings":";AA2SA;AACA;AACA;AACA","file":"sign.md","sourceRoot":"docs/v4/developer/zh/services/checkout","sourcesContent":["<template>\n<ContentSlotsDistributor :slot-key=\"$parent.slotKey\"><h1 id=\"signature-protocol\"><a class=\"header-anchor\" href=\"#signature-protocol\">#</a> Signature Protocol</h1>\n<p>PingPongCheckout API v4 ensures the authenticity and integrity of the request by verifying the signature.</p>\n<br />\n<div>\n   <Common-Warring>\n      <p>In v4 of the PingPongCheckout API, it is required that all parameters participate in the signature. If you have previously integrated with v2 or 3 and wish to upgrade to v4, you will need to follow the new signature rules for integration.</p>\n   </Common-Warring>\n</div>\n<br />\n<el-divider></el-divider>\n<h2 id=\"signature-type\"><a class=\"header-anchor\" href=\"#signature-type\">#</a> Signature Type</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Signature type</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">MD5</td>\n<td style=\"text-align:left\">Selecting the MD5 algorithm, merchants utilize a Salt value to perform digest signing and verification on the message.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SHA256</td>\n<td style=\"text-align:left\">Selecting the SHA256 algorithm, merchants utilize a Salt value to perform digest signing and verification on the message.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"request-signature\"><a class=\"header-anchor\" href=\"#request-signature\">#</a> Request Signature</h2>\n<p>The following is the list of request signature parameters agreed upon between PingPongCheckout API v4 and the calling party. Note that the content included in &quot;bizContent&quot; may vary for different interfaces：</p>\n<table>\n<thead>\n<tr>\n<th>Parameter field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>accId</td>\n<td>PingPong merchant store ID</td>\n</tr>\n<tr>\n<td>clientId</td>\n<td>PingPong merchant ID</td>\n</tr>\n<tr>\n<td>signType</td>\n<td>signing algorithms</td>\n</tr>\n<tr>\n<td>version</td>\n<td>Currently fixed at 1.0, may be adjusted with changes to theapiin the future</td>\n</tr>\n<tr>\n<td>bizContent</td>\n<td>The collection of request parameters, excluding common request parameters, must be passed in this parameter. There is no maximum length limit for this parameter</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"response-signature\"><a class=\"header-anchor\" href=\"#response-signature\">#</a> Response Signature</h2>\n<p>For requests where the signature verification is successful, PingPong Payment API v4 will sign the response. To ensure security, it is recommended to perform signature verification on the response.</p>\n<div>\n   <Common-Warring>\n      <p>The \"sign\" field is excluded from the signature calculation.</p>\n   </Common-Warring>\n</div>\n<br />\n<h2 id=\"asynchronous-notification-signature\"><a class=\"header-anchor\" href=\"#asynchronous-notification-signature\">#</a> Asynchronous Notification Signature</h2>\n<p>The signature scope and method for asynchronous notifications are the same as request signatures.</p>\n<h2 id=\"assembling-the-string-for-signature-calculation\"><a class=\"header-anchor\" href=\"#assembling-the-string-for-signature-calculation\">#</a> Assembling the String for Signature Calculation</h2>\n<ol>\n<li>Retrieve all the contents of the POST request, excluding the &quot;sign&quot; field.</li>\n<li>Sort the parameters in ascending order based on their key's ASCII value (alphabetically).</li>\n<li>Combine the sorted parameters and their corresponding values in the format &quot;parameter=value&quot;. Connect these parameters using the &quot;&amp;&quot; character. Place the signature key (salt) at the beginning of the string to be signed. Thus, the signContent = {salt}key1=val2&amp;key2=val2&amp;key3=val3. This is the complete string that needs to be signed.</li>\n</ol>\n<h2 id=\"calculate-signature-value\"><a class=\"header-anchor\" href=\"#calculate-signature-value\">#</a> Calculate Signature Value</h2>\n<blockquote>\n<p>SHA256 signature method is recommended as it offers higher security compared to MD5.</p>\n</blockquote>\n<p>The signing process involves generating a signature value based on the data in the request body and adding it to the request body. The signature value is calculated using a salt, request parameters, and the chosen signing method (MD5 or SHA256). The signature value will be used to verify the origin and integrity of the request.</p>\n<h2 id=\"signature-utility-class\"><a class=\"header-anchor\" href=\"#signature-utility-class\">#</a> Signature Utility Class</h2>\n<div>\n<code-group>\n<code-block title=\"JAVA\">\n<!--beforebegin--><div class=\"language-Java line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>fastjson<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JSONObject</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>codec<span class=\"token punctuation\">.</span>digest<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DigestUtils</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>lang3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StringUtils</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MessageDigest</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Collections</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * This class is used to sign the request content, ensuring the security of the request.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PingPongCheckoutClient</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> salt<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Salt value, used to increase the complexity of the signature.</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">SignAlgorithm</span> signAlgorithm<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Signature Algorithm Enumeration</span>\n\n    <span class=\"token comment\">/**\n     * Constructor, used to initialize the salt value and signature algorithm.\n     *\n     * @param salt          \n     * @param signAlgorithm \n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PingPongCheckoutClient</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> salt<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SignAlgorithm</span> signAlgorithm<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>salt <span class=\"token operator\">=</span> salt<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>signAlgorithm <span class=\"token operator\">=</span> signAlgorithm<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Signs the request content and adds the signature result to the request parameters.\n     *\n     * @param requestBody \n     * @return \n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JSONObject</span> <span class=\"token function\">signRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JSONObject</span> requestBody<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> sign <span class=\"token operator\">=</span> <span class=\"token function\">getSign</span><span class=\"token punctuation\">(</span>salt<span class=\"token punctuation\">,</span> signAlgorithm<span class=\"token punctuation\">,</span> requestBody<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Get the signature of the request content.</span>\n        requestBody<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sign\"</span><span class=\"token punctuation\">,</span> sign<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Add the signature result to the request parameters.</span>\n        <span class=\"token keyword\">return</span> requestBody<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Get the signature result of the request content.\n     *\n     * @param salt          \n     * @param signAlgorithm \n     * @param requestBody   \n     * @return \n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getSign</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> salt<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SignAlgorithm</span> signAlgorithm<span class=\"token punctuation\">,</span> <span class=\"token class-name\">JSONObject</span> requestBody<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">StringBuilder</span> stringBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> keys <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>requestBody<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>keys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Sort the keys of the request parameters in ascending order.</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key <span class=\"token operator\">:</span> keys<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Object</span> valueObject <span class=\"token operator\">=</span> requestBody<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// Remove empty values from the request parameters.</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>valueObject <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// Remove non-string values from the request parameters.</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>valueObject <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"request body illegal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token class-name\">String</span> value <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> valueObject<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotBlank</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Concatenate the keys and values of the request parameters into a string.</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">String</span> needSignStr <span class=\"token operator\">=</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>needSignStr<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            needSignStr <span class=\"token operator\">=</span> needSignStr<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> needSignStr<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Remove the last '&amp;' symbol from the concatenated string.</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">String</span> sign <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>signAlgorithm <span class=\"token operator\">==</span> <span class=\"token class-name\">SignAlgorithm</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MD5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sign <span class=\"token operator\">=</span> <span class=\"token function\">md5Sign</span><span class=\"token punctuation\">(</span>salt<span class=\"token punctuation\">,</span> needSignStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Call the md5Sign method to encrypt the string using MD5.</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>signAlgorithm <span class=\"token operator\">==</span> <span class=\"token class-name\">SignAlgorithm</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SHA256</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sign <span class=\"token operator\">=</span> <span class=\"token function\">sha256</span><span class=\"token punctuation\">(</span>salt<span class=\"token punctuation\">,</span> needSignStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Call the sha256 method to encrypt the string using SHA256.</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Signature algorithm not supported\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// If the signature algorithm is not supported, an exception will be thrown.</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> sign<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Return the signature result.</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Sign the request content using MD5.\n     *\n     * @param salt    \n     * @param content \n     * @return \n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">md5Sign</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> salt<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> content<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">MessageDigest</span> md <span class=\"token operator\">=</span> <span class=\"token class-name\">MessageDigest</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MD5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Create an instance of MD5.</span>\n            md<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>salt<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Include the salt value in the encryption process.</span>\n            md<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Include the request content in the encryption process.</span>\n            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> digest <span class=\"token operator\">=</span> md<span class=\"token punctuation\">.</span><span class=\"token function\">digest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Get the byte array.</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">byteToHexString</span><span class=\"token punctuation\">(</span>digest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Convert the byte array to a hexadecimal string.</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The MD5 signature failed.\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// If an error occurs during the encryption process, an exception will be thrown.</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Convert the byte array to a hexadecimal string.\n     *\n     * @param bytes \n     * @return \n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">byteToHexString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">StringBuilder</span> hexString <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> bytes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">String</span> hex <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHexString</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hex<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                hex <span class=\"token operator\">=</span> <span class=\"token char\">'0'</span> <span class=\"token operator\">+</span> hex<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            hexString<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>hex<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Concatenate the converted hexadecimal strings together.</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> hexString<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Return the converted hexadecimal string.</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Sign the request content using SHA256.\n     *\n     * @param salt    \n     * @param content \n     * @return \n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">sha256</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> salt<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> content<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">String</span> contentStr <span class=\"token operator\">=</span> salt<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Concatenate the salt value and request content into a single string.</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">DigestUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">sha256Hex</span><span class=\"token punctuation\">(</span>contentStr<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Call the DigestUtils.sha256Hex method to encrypt the string using SHA256, and convert the encrypted result into an uppercase hexadecimal string.</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sha256签名失败\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// If an error occurs during the encryption process, an exception will be thrown.</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Signature Algorithm Enumeration Class.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">SignAlgorithm</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token constant\">MD5</span><span class=\"token punctuation\">,</span>\n        <span class=\"token constant\">SHA256</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n    \n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br><span class=\"line-number\">38</span><br><span class=\"line-number\">39</span><br><span class=\"line-number\">40</span><br><span class=\"line-number\">41</span><br><span class=\"line-number\">42</span><br><span class=\"line-number\">43</span><br><span class=\"line-number\">44</span><br><span class=\"line-number\">45</span><br><span class=\"line-number\">46</span><br><span class=\"line-number\">47</span><br><span class=\"line-number\">48</span><br><span class=\"line-number\">49</span><br><span class=\"line-number\">50</span><br><span class=\"line-number\">51</span><br><span class=\"line-number\">52</span><br><span class=\"line-number\">53</span><br><span class=\"line-number\">54</span><br><span class=\"line-number\">55</span><br><span class=\"line-number\">56</span><br><span class=\"line-number\">57</span><br><span class=\"line-number\">58</span><br><span class=\"line-number\">59</span><br><span class=\"line-number\">60</span><br><span class=\"line-number\">61</span><br><span class=\"line-number\">62</span><br><span class=\"line-number\">63</span><br><span class=\"line-number\">64</span><br><span class=\"line-number\">65</span><br><span class=\"line-number\">66</span><br><span class=\"line-number\">67</span><br><span class=\"line-number\">68</span><br><span class=\"line-number\">69</span><br><span class=\"line-number\">70</span><br><span class=\"line-number\">71</span><br><span class=\"line-number\">72</span><br><span class=\"line-number\">73</span><br><span class=\"line-number\">74</span><br><span class=\"line-number\">75</span><br><span class=\"line-number\">76</span><br><span class=\"line-number\">77</span><br><span class=\"line-number\">78</span><br><span class=\"line-number\">79</span><br><span class=\"line-number\">80</span><br><span class=\"line-number\">81</span><br><span class=\"line-number\">82</span><br><span class=\"line-number\">83</span><br><span class=\"line-number\">84</span><br><span class=\"line-number\">85</span><br><span class=\"line-number\">86</span><br><span class=\"line-number\">87</span><br><span class=\"line-number\">88</span><br><span class=\"line-number\">89</span><br><span class=\"line-number\">90</span><br><span class=\"line-number\">91</span><br><span class=\"line-number\">92</span><br><span class=\"line-number\">93</span><br><span class=\"line-number\">94</span><br><span class=\"line-number\">95</span><br><span class=\"line-number\">96</span><br><span class=\"line-number\">97</span><br><span class=\"line-number\">98</span><br><span class=\"line-number\">99</span><br><span class=\"line-number\">100</span><br><span class=\"line-number\">101</span><br><span class=\"line-number\">102</span><br><span class=\"line-number\">103</span><br><span class=\"line-number\">104</span><br><span class=\"line-number\">105</span><br><span class=\"line-number\">106</span><br><span class=\"line-number\">107</span><br><span class=\"line-number\">108</span><br><span class=\"line-number\">109</span><br><span class=\"line-number\">110</span><br><span class=\"line-number\">111</span><br><span class=\"line-number\">112</span><br><span class=\"line-number\">113</span><br><span class=\"line-number\">114</span><br><span class=\"line-number\">115</span><br><span class=\"line-number\">116</span><br><span class=\"line-number\">117</span><br><span class=\"line-number\">118</span><br><span class=\"line-number\">119</span><br><span class=\"line-number\">120</span><br><span class=\"line-number\">121</span><br><span class=\"line-number\">122</span><br><span class=\"line-number\">123</span><br><span class=\"line-number\">124</span><br><span class=\"line-number\">125</span><br><span class=\"line-number\">126</span><br><span class=\"line-number\">127</span><br><span class=\"line-number\">128</span><br><span class=\"line-number\">129</span><br><span class=\"line-number\">130</span><br><span class=\"line-number\">131</span><br><span class=\"line-number\">132</span><br><span class=\"line-number\">133</span><br><span class=\"line-number\">134</span><br><span class=\"line-number\">135</span><br><span class=\"line-number\">136</span><br><span class=\"line-number\">137</span><br><span class=\"line-number\">138</span><br><span class=\"line-number\">139</span><br><span class=\"line-number\">140</span><br><span class=\"line-number\">141</span><br><span class=\"line-number\">142</span><br><span class=\"line-number\">143</span><br><span class=\"line-number\">144</span><br><span class=\"line-number\">145</span><br><span class=\"line-number\">146</span><br><span class=\"line-number\">147</span><br><span class=\"line-number\">148</span><br></div><!--beforeend--></div><!--afterend--></code-block>\n<code-block title=\"PHP\">\n<!--beforebegin--><div class=\"language-PHP line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-php\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">PingPongCheckoutClient</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token variable\">$salt</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token variable\">$signAlgorithm</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">SIGN_ALGORITHM_MD5</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'MD5'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">SIGN_ALGORITHM_SHA256</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'SHA256'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$salt</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$signAlgorithm</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">salt</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$salt</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">signAlgorithm</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$signAlgorithm</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">md5Sign</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$salt</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$content</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$content</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$salt</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">sha256</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$salt</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$content</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'sha256'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$content</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$salt</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">byteToHexString</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$bytes</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$hexString</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$bytes</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token variable\">$hexString</span> <span class=\"token operator\">.=</span> <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"%02x\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$byte</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$hexString</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">getSign</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$salt</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$signAlgorithm</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$requestBody</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$sortedKeys</span> <span class=\"token operator\">=</span> <span class=\"token function\">array_keys</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$requestBody</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$sortedKeys</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$content</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$sortedKeys</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$requestBody</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">is_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> <span class=\"token function\">json_encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token variable\">$content</span> <span class=\"token operator\">.=</span> <span class=\"token variable\">$key</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'='</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$value</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'&amp;'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token variable\">$content</span> <span class=\"token operator\">=</span> <span class=\"token function\">rtrim</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$content</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'&amp;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$signAlgorithm</span> <span class=\"token operator\">===</span> <span class=\"token keyword static-context\">self</span><span class=\"token operator\">::</span><span class=\"token constant\">SIGN_ALGORITHM_MD5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword static-context\">self</span><span class=\"token operator\">::</span><span class=\"token function\">md5Sign</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$salt</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$content</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword static-context\">self</span><span class=\"token operator\">::</span><span class=\"token function\">byteToHexString</span><span class=\"token punctuation\">(</span><span class=\"token function\">hash_hmac</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'sha256'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$content</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$salt</span><span class=\"token punctuation\">,</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">signRequest</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$requestBody</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$signature</span> <span class=\"token operator\">=</span> <span class=\"token keyword static-context\">self</span><span class=\"token operator\">::</span><span class=\"token function\">getSign</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">salt</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">signAlgorithm</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$requestBody</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$requestBody</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'signature'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$signature</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$requestBody</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br><span class=\"line-number\">38</span><br><span class=\"line-number\">39</span><br><span class=\"line-number\">40</span><br><span class=\"line-number\">41</span><br><span class=\"line-number\">42</span><br><span class=\"line-number\">43</span><br><span class=\"line-number\">44</span><br><span class=\"line-number\">45</span><br><span class=\"line-number\">46</span><br><span class=\"line-number\">47</span><br><span class=\"line-number\">48</span><br><span class=\"line-number\">49</span><br><span class=\"line-number\">50</span><br><span class=\"line-number\">51</span><br><span class=\"line-number\">52</span><br><span class=\"line-number\">53</span><br><span class=\"line-number\">54</span><br></div><!--beforeend--></div><!--afterend--></code-block>\n</code-group>\n</div> \n</ContentSlotsDistributor>\n</template>\n<script>\n    import CodeBlock from \"../../../../../.vuepress/theme/global-components/CodeBlock\";\n    export default {\n        components: {CodeBlock}\n    }\n</script>\n\n"]}]}